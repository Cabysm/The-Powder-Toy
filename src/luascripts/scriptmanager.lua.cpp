#ifdef LUACONSOLE
#include "luaconsole.h"

void luaopen_scriptmanager(lua_State *l)
{
#ifndef _MSC_VER
	int scriptmanager_luac_sz = 40943;
	const char* scriptmanager_luac = "--Cracker64's Autorun Script Manager\015\n--The autorun to end all autoruns\015\n--Version 3.5\015\n\015\n--TODO:\015\n--manual file addition (that can be anywhere and any extension)\015\n--Moving window (because why not)\015\n--some more API functions\015\n--prettier, organize code\015\n\015\n--CHANGES:\015\n--Version 3.5: Lua5.2 support, TPT 91.0 platform API support, [] can be used to scroll, misc fixes\015\n--Version 3.4: some new buttons, better tooltips, fix 'Change dir' button, fix broken buttons on OS X\015\n--Version 3.3: fix apostophes in filenames, allow authors to rename their scripts on the server\015\n--Version 3.2: put MANAGER stuff in table, fix displaying changelogs\015\n--Version 3.1: Organize scripts less randomly, fix scripts being run twice, fix other bugs\015\n--central script / update server at starcatcher.us / delete local scripts / lots of other things by jacob1 v3.0\015\n--Scan all subdirectories in scripts folder! v2.25\015\n--Remove step hooks, v87 fixes them\015\n--Socket is now default in v87+ , horray, everyone can now use update features without extra downloads.\015\n--Handles up to 50 extra step functions, up from the default 5 (not including the manager's step) v2.1\015\n--Other various nice API functions\015\n--Scripts can store/retrieve settings through the manager, see comments below v2.0\015\n--Small fillrect change for v85, boxes can have backgrounds v1.92\015\n--Support spaces in exe names v1.91\015\n--Auto-update for OTHER scripts now works, is a bit messy, will fix later, but nothing should change for users to use this\015\n--  Place a line '--VER num UPDATE link' in one of the first four lines of the file, see my above example\015\n--  The link at top downloads a file that contains ONLY version,full link,and prints the rest(changelog). See my link for example\015\n\015\nif not socket then error(\"TPT version not supported\") end\015\nif MANAGER then error(\"manager is already running\") end\015\nif tpt.version.jacob1s_mod == 30 and tpt.version.jacob1s_mod_minor == 0 then\015\n\011return\015\nend\015\n\015\nlocal scriptversion = 7\015\nMANAGER = {[\"version\"] = \"3.5\", [\"scriptversion\"] = scriptversion, [\"hidden\"] = true}\015\n\015\nlocal TPT_LUA_PATH = 'scripts'\015\nlocal PATH_SEP = '\\\\'\015\nlocal OS = \"WIN32\"\015\nlocal jacobsmod = tpt.version.jacob1s_mod\015\nlocal CHECKUPDATE = false\015\nlocal EXE_NAME\015\nif platform then\015\n\011OS = platform.platform()\015\n\011if OS ~= \"WIN32\" and OS ~= \"WIN64\" then\015\n\011\011PATH_SEP = '/'\015\n\011end\015\n\011EXE_NAME = platform.exeName()\015\n\011local temp = EXE_NAME:reverse():find(PATH_SEP)\015\n\011EXE_NAME = EXE_NAME:sub(#EXE_NAME-temp+2)\015\nelse\015\n\011if os.getenv('HOME') then\015\n\011\011PATH_SEP = '/'\015\n\011\011if fs.exists(\"/Applications\") then\015\n\011\011\011OS = \"MACOSX\"\015\n\011\011else\015\n\011\011\011OS = \"LIN64\"\015\n\011\011end\015\n\011end\015\n\011if OS == \"WIN32\" or OS == \"WIN64\" then\015\n\011\011EXE_NAME = jacobsmod and \"Jacob1\\'s Mod.exe\" or \"Powder.exe\"\015\n\011elseif OS == \"MACOSX\" then\015\n\011\011EXE_NAME = \"powder-x\" --can't restart on OS X (if using < 91.0)\015\n\011else\015\n\011\011EXE_NAME = jacobsmod and \"Jacob1\\'s Mod\" or \"powder\"\015\n\011end\015\nend\015\nlocal filenames = {}\015\nlocal num_files = 0 --downloaded scripts aren't stored in filenames\015\nlocal localscripts = {}\015\nlocal onlinescripts = {}\015\nlocal running = {}\015\nlocal requiresrestart=false\015\nlocal online = false\015\nlocal first_online = true\015\nlocal updatetable --temporarily holds info on script manager updates\015\nlocal gen_buttons\015\nlocal sidebutton\015\nlocal download_file\015\nlocal settings = {}\015\nmath.randomseed(os.time()) math.random() math.random() math.random() --some filler randoms\015\n\015\n--get line that can be saved into scriptinfo file\015\nlocal function scriptInfoString(info)\015\n\011--Write table into data format\015\n\011if type(info)~=\"table\" then return end\015\n\011local t = {}\015\n\011for k,v in pairs(info) do\015\n\011\011table.insert(t,k..\":\\\"\"..v..\"\\\"\")\015\n\011end\015\n\011local rstr = table.concat(t,\",\"):gsub(\"\\r\",\"\"):gsub(\"\\n\",\"\\\\n\")\015\n\011return rstr\015\nend\015\n\015\n--read a scriptinfo line\015\nlocal function readScriptInfo(list)\015\n\011if not list then return {} end\015\n\011local scriptlist = {}\015\n\011for i in list:gmatch(\"[^\\n]+\") do\015\n\011\011local t = {}\015\n\011\011local ID = 0\015\n\011\011for k,v in i:gmatch(\"(%w+):\\\"([^\\\"]*)\\\"\") do\015\n\011\011\011t[k]= tonumber(v) or v:gsub(\"\\r\",\"\"):gsub(\"\\\\n\",\"\\n\")\015\n\011\011end\015\n\011\011scriptlist[t.ID] = t\015\n\011end\015\n\011return scriptlist\015\nend\015\n\015\n--save settings\015\nlocal function save_last()\015\n\011local savestring=\"\"\015\n\011for script,v in pairs(running) do\015\n\011\011savestring = savestring..\" \\\"\"..script..\"\\\"\"\015\n\011end\015\n\011savestring = \"SAV \"..savestring..\"\\nDIR \"..TPT_LUA_PATH\015\n\011for k,t in pairs(settings) do\015\n\011for n,v in pairs(t) do\015\n\011\011savestring = savestring..\"\\nSET \"..k..\" \"..n..\":\\\"\"..v..\"\\\"\"\015\n\011end\015\n\011end\015\n\011local f\015\n\011if TPT_LUA_PATH == \"scripts\" then\015\n\011\011f = io.open(TPT_LUA_PATH..PATH_SEP..\"autorunsettings.txt\", \"w\")\015\n\011else\015\n\011\011f = io.open(\"autorunsettings.txt\", \"w\")\015\n\011end\015\n\011if f then\015\n\011\011f:write(savestring)\015\n\011\011f:close()\015\n\011end\015\n\015\n\011f = io.open(TPT_LUA_PATH..PATH_SEP..\"downloaded\"..PATH_SEP..\"scriptinfo\", \"w\")\015\n\011if f then\015\n\011\011for k,v in pairs(localscripts) do\015\n\011\011\011f:write(scriptInfoString(v)..\"\\n\")\015\n\011\011end\015\n\011\011f:close()\015\n\011end\015\nend\015\n\015\nlocal function load_downloaded()\015\n\011local f = io.open(TPT_LUA_PATH..PATH_SEP..\"downloaded\"..PATH_SEP..\"scriptinfo\",\"r\")\015\n\011if f then\015\n\011\011local lines = f:read(\"*a\")\015\n\011\011f:close()\015\n\011\011localscripts = readScriptInfo(lines)\015\n\011\011for k,v in pairs(localscripts) do\015\n\011\011\011if k ~= 1 then\015\n\011\011\011\011if not v[\"ID\"] or not v[\"name\"] or not v[\"description\"] or not v[\"path\"] or not v[\"version\"] then\015\n\011\011\011\011\011localscripts[k] = nil\015\n\011\011\011\011elseif not fs.exists(TPT_LUA_PATH..\"/\"..v[\"path\"]:gsub(\"\\\\\",\"/\")) then\015\n\011\011\011\011\011 localscripts[k] = nil\015\n\011\011\011\011end\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\nend\015\n\015\n--load settings before anything else\015\nlocal function load_last()\015\n\011local f = io.open(TPT_LUA_PATH..PATH_SEP..\"autorunsettings.txt\",\"r\")\015\n\011if not f then\015\n\011\011f = io.open(\"autorunsettings.txt\",\"r\")\015\n\011end\015\n\011if f then\015\n\011\011local lines = {}\015\n\011\011local line = f:read(\"*l\")\015\n\011\011while line do\015\n\011\011\011table.insert(lines,(line:gsub(\"\\r\",\"\")))\015\n\011\011\011line = f:read(\"*l\")\015\n\011\011end\015\n\011\011f:close()\015\n\011\011for i=1, #lines do\015\n\011\011\011local tok=lines[i]:sub(1,3)\015\n\011\011\011local str=lines[i]:sub(5)\015\n\011\011\011if tok==\"SAV\" then\015\n\011\011\011\011for word in string.gmatch(str, \"\\\"(.-)\\\"\") do running[word] = true end\015\n\011\011\011elseif tok==\"EXE\" then\015\n\011\011\011\011EXE_NAME=str\015\n\011\011\011elseif tok==\"DIR\" then\015\n\011\011\011\011TPT_LUA_PATH=str\015\n\011\011\011elseif tok==\"SET\" then\015\n\011\011\011\011local ident,name,val = string.match(str,\"(.-) (.-):\\\"(.-)\\\"\")\015\n\011\011\011\011if settings[ident] then settings[ident][name]=val\015\n\011\011\011\011else settings[ident]={[name]=val} end\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\015\n\011load_downloaded()\015\nend\015\nload_last()\015\n--get list of files in scripts folder\015\nlocal function load_filenames()\015\n\011filenames = {}\015\n\011local function searchRecursive(directory)\015\n\011\011local dirlist = fs.list(directory)\015\n\011\011if not dirlist then return end\015\n\011\011for i,v in ipairs(dirlist) do\015\n\011\011\011local file = directory..\"/\"..v\015\n\011\011\011if fs.isDirectory(file) and v ~= \"downloaded\" then\015\n\011\011\011\011searchRecursive(file)\015\n\011\011\011elseif fs.isFile(file) then\015\n\011\011\011\011if file:find(\"%.lua$\") then\015\n\011\011\011\011\011local toinsert = file:sub(#TPT_LUA_PATH+2)\015\n\011\011\011\011\011if OS == \"WIN32\" or OS == \"WIN64\" then\015\n\011\011\011\011\011\011toinsert = toinsert:gsub(\"/\", \"\\\\\") --not actually required\015\n\011\011\011\011\011end\015\n\011\011\011\011\011table.insert(filenames, toinsert)\015\n\011\011\011\011end\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\011searchRecursive(TPT_LUA_PATH)\015\n\011table.sort(filenames, function(first,second) return first:lower() < second:lower() end)\015\nend\015\n--ui object stuff\015\nlocal ui_base local ui_box local ui_line local ui_text local ui_button local ui_scrollbar local ui_tooltip local ui_checkbox local ui_console local ui_window\015\nlocal tooltip\015\nui_base = {\015\nnew = function()\015\n\011local b={}\015\n\011b.drawlist = {}\015\n\011function b:drawadd(f)\015\n\011\011table.insert(self.drawlist,f)\015\n\011end\015\n\011function b:draw(...)\015\n\011\011for _,f in ipairs(self.drawlist) do\015\n\011\011\011if type(f)==\"function\" then\015\n\011\011\011\011f(self,...)\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\011b.movelist = {}\015\n\011function b:moveadd(f)\015\n\011\011table.insert(self.movelist,f)\015\n\011end\015\n\011function b:onmove(x,y)\015\n\011\011for _,f in ipairs(self.movelist) do\015\n\011\011\011if type(f)==\"function\" then\015\n\011\011\011\011f(self,x,y)\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\011return b\015\nend\015\n}\015\nui_box = {\015\nnew = function(x,y,w,h,r,g,b)\015\n\011local box=ui_base.new()\015\n\011box.x=x box.y=y box.w=w box.h=h box.x2=x+w box.y2=y+h\015\n\011box.r=r or 255 box.g=g or 255 box.b=b or 255\015\n\011function box:setcolor(r,g,b) self.r=r self.g=g self.b=b end\015\n\011function box:setbackground(r,g,b,a) self.br=r self.bg=g self.bb=b self.ba=a end\015\n\011box.drawbox=true\015\n\011box.drawbackground=false\015\n\011box:drawadd(function(self) if self.drawbackground then tpt.fillrect(self.x,self.y,self.w+1,self.h+1,self.br,self.bg,self.bb,self.ba) end\015\n\011\011\011\011\011\011\011\011if self.drawbox then tpt.drawrect(self.x,self.y,self.w,self.h,self.r,self.g,self.b) end end)\015\n\011box:moveadd(function(self,x,y)\015\n\011\011if x then self.x=self.x+x self.x2=self.x2+x end\015\n\011\011if y then self.y=self.y+y self.y2=self.y2+y end\015\n\011end)\015\n\011return box\015\nend\015\n}\015\nui_line = {\015\nnew=function(x,y,x2,y2,r,g,b)\015\n\011local line=ui_box.new(x,y,x2-x,y2-y,r,g,b)\015\n\011--Line is essentially a box, but with a different draw\015\n\011line.drawlist={}\015\n\011line:drawadd(function(self) tpt.drawline(self.x,self.y,self.x2,self.y2,self.r,self.g,self.b) end)\015\n\011return line\015\n\011end\015\n}\015\nui_text = {\015\nnew = function(text,x,y,r,g,b)\015\n\011local txt = ui_base.new()\015\n\011txt.text = text\015\n\011txt.x=x or 0 txt.y=y or 0 txt.r=r or 255 txt.g=g or 255 txt.b=b or 255\015\n\011function txt:setcolor(r,g,b) self.r=r self.g=g self.b=b end\015\n\011txt:drawadd(function(self,x,y) tpt.drawtext(x or self.x,y or self.y,self.text,self.r,self.g,self.b) end)\015\n\011txt:moveadd(function(self,x,y)\015\n\011\011if x then self.x=self.x+x end\015\n\011\011if y then self.y=self.y+y end\015\n\011end)\015\n\011function txt:process() return false end\015\n\011return txt\015\nend,\015\n--Scrolls while holding mouse over\015\nnewscroll = function(text,x,y,vis,r,g,b)\015\n\011local txt = ui_text.new(text,x,y,r,g,b)\015\n\011if tpt.textwidth(text)<vis then return txt end\015\n\011txt.visible=vis\015\n\011txt.length=string.len(text)\015\n\011txt.start=1\015\n\011txt.drawlist={} --reset draw\015\n\011txt.timer=socket.gettime()+3\015\n\011function txt:cuttext(self)\015\n\011\011local last = self.start+1\015\n\011\011while tpt.textwidth(self.text:sub(self.start,last))<txt.visible and last<=self.length do\015\n\011\011\011last = last+1\015\n\011\011end\015\n\011\011self.last=last-1\015\n\011end\015\n\011txt:cuttext(txt)\015\n\011txt.minlast=txt.last-1\015\n\011txt.ppl=((txt.visible-6)/(txt.length-txt.minlast+1))\015\n\011txt:drawadd(function(self,x,y)\015\n\011\011if socket.gettime() > self.timer then\015\n\011\011\011if self.last >= self.length then\015\n\011\011\011\011self.start = 1\015\n\011\011\011\011self:cuttext(self)\015\n\011\011\011\011self.timer = socket.gettime()+3\015\n\011\011\011else\015\n\011\011\011\011self.start = self.start + 1\015\n\011\011\011\011self:cuttext(self)\015\n\011\011\011\011if self.last >= self.length then\015\n\011\011\011\011\011self.timer = socket.gettime()+3\015\n\011\011\011\011else\015\n\011\011\011\011\011self.timer = socket.gettime()+.15\015\n\011\011\011\011end\015\n\011\011\011end\015\n\011\011end\015\n\011\011tpt.drawtext(x or self.x,y or self.y, self.text:sub(self.start,self.last) ,self.r,self.g,self.b)\015\n\011end)\015\n\011function txt:process(mx,my,button,event,wheel)\015\n\011\011if event==3 then\015\n\011\011\011local newlast = math.floor((mx-self.x)/self.ppl)+self.minlast\015\n\011\011\011if newlast<self.minlast then newlast=self.minlast end\015\n\011\011\011if newlast>0 and newlast~=self.last then\015\n\011\011\011\011local newstart=1\015\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\015\n\011\011\011\011\011newstart=newstart+1\015\n\011\011\011\011end\015\n\011\011\011\011self.start=newstart self.last=newlast\015\n\011\011\011\011self.timer = socket.gettime()+3\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\011return txt\015\nend\015\n}\015\nui_scrollbar = {\015\nnew = function(x,y,h,t,m)\015\n\011local bar = ui_base.new() --use line object as base?\015\n\011bar.x=x bar.y=y bar.h=h\015\n\011bar.total=t\015\n\011bar.numshown=m\015\n\011bar.pos=0\015\n\011bar.length=math.floor((1/math.ceil(bar.total-bar.numshown+1))*bar.h)\015\n\011bar.soffset=math.floor(bar.pos*((bar.h-bar.length)/(bar.total-bar.numshown)))\015\n\011function bar:update(total,shown,pos)\015\n\011\011self.pos=pos or 0\015\n\011\011if self.pos<0 then self.pos=0 end\015\n\011\011self.total=total\015\n\011\011self.numshown=shown\015\n\011\011self.length= math.floor((1/math.ceil(self.total-self.numshown+1))*self.h)\015\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\015\n\011end\015\n\011function bar:move(wheel)\015\n\011\011self.pos = self.pos-wheel\015\n\011\011if self.pos < 0 then self.pos=0 end\015\n\011\011if self.pos > (self.total-self.numshown) then self.pos=(self.total-self.numshown) end\015\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\015\n\011end\015\n\011bar:drawadd(function(self)\015\n\011\011if self.total > self.numshown then\015\n\011\011\011tpt.drawline(self.x,self.y+self.soffset,self.x,self.y+self.soffset+self.length)\015\n\011\011end\015\n\011end)\015\n\011bar:moveadd(function(self,x,y)\015\n\011\011if x then self.x=self.x+x end\015\n\011\011if y then self.y=self.y+y end\015\n\011end)\015\n\011function bar:process(mx,my,button,event,wheel)\015\n\011\011if wheel~=0 and not MANAGER.hidden then\015\n\011\011\011if self.total > self.numshown then\015\n\011\011\011\011local previous = self.pos\015\n\011\011\011\011self:move(wheel)\015\n\011\011\011\011if self.pos~=previous then\015\n\011\011\011\011\011return previous-self.pos\015\n\011\011\011\011end\015\n\011\011\011end\015\n\011\011end\015\n\011\011--possibly click the bar and drag?\015\n\011\011return false\015\n\011end\015\n\011return bar\015\nend\015\n}\015\nui_button = {\015\nnew = function(x,y,w,h,f,text)\015\n\011local b = ui_box.new(x,y,w,h)\015\n\011b.f=f\015\n\011b.t=ui_text.new(text,x+2,y+2)\015\n\011b.drawbox=false\015\n\011b.clicked=false\015\n\011b.almostselected=false\015\n\011b.invert=true\015\n\011b:setbackground(127,127,127,125)\015\n\011b:drawadd(function(self)\015\n\011\011if self.invert and self.almostselected then\015\n\011\011\011self.almostselected=false\015\n\011\011\011tpt.fillrect(self.x,self.y,self.w,self.h)\015\n\011\011\011local tr=self.t.r local tg=self.t.g local tb=self.t.b\015\n\011\011\011b.t:setcolor(0,0,0)\015\n\011\011\011b.t:draw()\015\n\011\011\011b.t:setcolor(tr,tg,tb)\015\n\011\011else\015\n\011\011\011if tpt.mousex>=self.x and tpt.mousex<=self.x2 and tpt.mousey>=self.y and tpt.mousey<=self.y2 then\015\n\011\011\011\011self.drawbackground=true\015\n\011\011\011else\015\n\011\011\011\011self.drawbackground=false\015\n\011\011\011end\015\n\011\011\011b.t:draw()\015\n\011\011end\015\n\011end)\015\n\011b:moveadd(function(self,x,y)\015\n\011\011self.t:onmove(x,y)\015\n\011end)\015\n\011function b:process(mx,my,button,event,wheel)\015\n\011\011local clicked = self.clicked\015\n\011\011if event==2 then self.clicked = false end\015\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then return false end\015\n\011\011if event==1 then\015\n\011\011\011self.clicked=true\015\n\011\011elseif clicked then\015\n\011\011\011if event==3 then self.almostselected=true end\015\n\011\011\011if event==2 then self:f() end\015\n\011\011\011return true\015\n\011\011end\015\n\011end\015\n\011return b\015\nend\015\n}\015\nui_tooltip = {\015\nnew = function(x,y,w,text)\015\n\011local b = ui_box.new(x,y-1,w,0)\015\n\011function b:updatetooltip(tooltip)\015\n\011\011self.tooltip = tooltip\015\n\011\011self.length = #tooltip\015\n\011\011self.lines = 1\015\n\015\n\011\011local linebreak,lastspace = 0,nil\015\n\011\011for i=0,#self.tooltip do\015\n\011\011\011local width = tpt.textwidth(tooltip:sub(linebreak,i+1))\015\n\011\011\011if width > self.w/2 and tooltip:sub(i,i):match(\"[%s,_%.%-?!]\") then\015\n\011\011\011\011lastspace = i\015\n\011\011\011end\015\n\011\011\011local isnewline = (self.tooltip:sub(i,i) == '\\n')\015\n\011\011\011if width > self.w or isnewline then\015\n\011\011\011\011local pos = (i==#tooltip or not lastspace) and i or lastspace\015\n\011\011\011\011self.lines = self.lines + 1\015\n\011\011\011\011if self.tooltip:sub(pos,pos) == ' ' then\015\n\011\011\011\011\011self.tooltip = self.tooltip:sub(1,pos-1)..\"\\n\"..self.tooltip:sub(pos+1)\015\n\011\011\011\011elseif not isnewline then\015\n\011\011\011\011\011self.length = self.length + 1\015\n\011\011\011\011\011self.tooltip = self.tooltip:sub(1,pos-1)..\"\\n\"..self.tooltip:sub(pos)\015\n\011\011\011\011\011i = i + 1\015\n\011\011\011\011\011pos = pos + 1\015\n\011\011\011\011end\015\n\011\011\011\011linebreak = pos+1\015\n\011\011\011\011lastspace = nil\015\n\011\011\011end\015\n\011\011end\015\n\011\011self.h = self.lines*12+2\015\n\011\011--self.w = tpt.textwidth(self.tooltip)+3\015\n\011\011self.drawbox = tooltip ~= \"\"\015\n\011\011self.drawbackground = tooltip ~= \"\"\015\n\011end\015\n\011function b:settooltip(tooltip_)\015\n\011\011tooltip:onmove(tpt.mousex+5-tooltip.x, tpt.mousey+5-tooltip.y)\015\n\011\011tooltip:updatetooltip(tooltip_)\015\n\011end\015\n\011b:updatetooltip(text)\015\n\011b:setbackground(0,0,0,255)\015\n\011b.drawbackground = true\015\n\011b:drawadd(function(self)\015\n\011\011if self.tooltip ~= \"\" then\015\n\011\011\011tpt.drawtext(self.x+1,self.y+2,self.tooltip)\015\n\011\011end\015\n\011\011self:updatetooltip(\"\")\015\n\011end)\015\n\011function b:process(mx,my,button,event,wheel) end\015\n\011return b\015\nend\015\n}\015\nui_checkbox = {\015\nup_button = function(x,y,w,h,f,text)\015\n\011local b=ui_button.new(x,y,w,h,f,text)\015\n\011b.canupdate=false\015\n\011return b\015\nend,\015\nnew_button = function(x,y,w,h,splitx,f,f2,text,localscript)\015\n\011local b = ui_box.new(x,y,splitx,h)\015\n\011b.f=f b.f2=f2\015\n\011b.localscript=localscript\015\n\011b.splitx = splitx\015\n\011b.t=ui_text.newscroll(text,x+24,y+2,splitx-24)\015\n\011b.clicked=false\015\n\011b.selected=false\015\n\011b.checkbut=ui_checkbox.up_button(x+splitx+9,y,33,9,ui_button.scriptcheck,\"Update\")\015\n\011b.drawbox=false\015\n\011b:setbackground(127,127,127,100)\015\n\011b:drawadd(function(self)\015\n\011\011if self.t.text == \"\" then return end\015\n\011\011self.drawbackground = false\015\n\011\011if tpt.mousey >= self.y and tpt.mousey < self.y2 then\015\n\011\011\011if tpt.mousex >= self.x and tpt.mousex < self.x+8 then\015\n\011\011\011\011if self.localscript then\015\n\011\011\011\011\011tooltip:settooltip(\"delete this script\")\015\n\011\011\011\011else\015\n\011\011\011\011\011tooltip:settooltip(\"view script in browser\")\015\n\011\011\011\011end\015\n\011\011\011elseif tpt.mousex>=self.x and tpt.mousex<self.x2 then\015\n\011\011\011\011local script\015\n\011\011\011\011if online and onlinescripts[self.ID][\"description\"] then\015\n\011\011\011\011\011script = onlinescripts[self.ID]\015\n\011\011\011\011elseif not online and localscripts[self.ID] then\015\n\011\011\011\011\011script = localscripts[self.ID]\015\n\011\011\011\011end\015\n\011\011\011\011if script then\015\n\011\011\011\011\011tooltip:settooltip(script[\"name\"]..\" by \"..script[\"author\"]..\"\\n\\n\"..script[\"description\"])\015\n\011\011\011\011end\015\n\011\011\011\011self.drawbackground = true\015\n\011\011\011elseif tpt.mousex >= self.x2 then\015\n\011\011\011\011if tpt.mousex < self.x2+9 and self.running then\015\n\011\011\011\011\011tooltip:settooltip(online and \"downloaded\" or \"running\")\015\n\011\011\011\011elseif tpt.mousex >= self.x2+9 and tpt.mousex < self.x2+43 and self.checkbut.canupdate and onlinescripts[self.ID] and onlinescripts[self.ID][\"changelog\"] then\015\n\011\011\011\011\011tooltip:settooltip(onlinescripts[self.ID][\"changelog\"])\015\n\011\011\011\011end\015\n\011\011\011end\015\n\011\011end\015\n\011\011self.t:draw()\015\n\011\011if self.localscript then\015\n\011\011\011if self.deletealmostselected then\015\n\011\011\011\011self.deletealmostselected = false\015\n\011\011\011\011tpt.drawtext(self.x+1, self.y+1, \"\\134\", 255, 48, 32, 255)\015\n\011\011\011else\015\n\011\011\011\011tpt.drawtext(self.x+1, self.y+1, \"\\134\", 160, 48, 32, 255)\015\n\011\011\011end\015\n\011\011\011tpt.drawtext(self.x+1, self.y+1, \"\\133\", 255, 255, 255, 255)\015\n\011\011else\015\n\011\011\011tpt.drawtext(self.x+1, self.y+1, \"\\147\", 255, 200, 80, 255)\015\n\011\011end\015\n\011\011tpt.drawrect(self.x+12,self.y+1,8,8)\015\n\011\011if self.almostselected then self.almostselected=false tpt.fillrect(self.x+12,self.y+1,8,8,150,150,150)\015\n\011\011elseif self.selected then tpt.fillrect(self.x+12,self.y+1,8,8) end\015\n\011\011local filepath = self.ID and localscripts[self.ID] and localscripts[self.ID][\"path\"] or self.t.text\015\n\011\011if self.running then tpt.drawtext(self.x+self.splitx+2,self.y+2,online and \"D\" or \"R\") end\015\n\011\011if self.checkbut.canupdate then self.checkbut:draw() end\015\n\011end)\015\n\011b:moveadd(function(self,x,y)\015\n\011\011self.t:onmove(x,y)\015\n\011\011self.checkbut:onmove(x,y)\015\n\011end)\015\n\011function b:process(mx,my,button,event,wheel)\015\n\011\011if self.f2 and mx <= self.x+8 then\015\n\011\011\011if event==1 then\015\n\011\011\011\011self.clicked = 1\015\n\011\011\011elseif self.clicked == 1 then\015\n\011\011\011\011if event==3 then self.deletealmostselected = true end\015\n\011\011\011\011if event==2 then self:f2() end\015\n\011\011\011end\015\n\011\011elseif self.f and mx<=self.x+self.splitx then\015\n\011\011\011if event==1 then\015\n\011\011\011\011self.clicked = 2\015\n\011\011\011elseif self.clicked == 2 then\015\n\011\011\011\011if event==3 then self.almostselected=true end\015\n\011\011\011\011if event==2 then self:f() end\015\n\011\011\011\011self.t:process(mx,my,button,event,wheel)\015\n\011\011\011end\015\n\011\011else\015\n\011\011\011if self.checkbut.canupdate then self.checkbut:process(mx,my,button,event,wheel) end\015\n\011\011end\015\n\011\011return true\015\n\011end\015\n\011return b\015\nend,\015\nnew = function(x,y,w,h)\015\n\011local box = ui_box.new(x,y,w,h)\015\n\011box.list={}\015\n\011box.numlist = 0\015\n\011box.max_lines = math.floor(box.h/10)-1\015\n\011box.max_text_width = math.floor(box.w*0.8)\015\n\011box.splitx=x+box.max_text_width\015\n\011box.scrollbar = ui_scrollbar.new(box.x2-2,box.y+11,box.h-12,0,box.max_lines)\015\n\011box.lines={\015\n\011\011ui_line.new(box.x+1,box.y+10,box.x2-1,box.y+10,170,170,170),\015\n\011\011ui_line.new(box.x+22,box.y+10,box.x+22,box.y2-1,170,170,170),\015\n\011\011ui_line.new(box.splitx,box.y+10,box.splitx,box.y2-1,170,170,170),\015\n\011\011ui_line.new(box.splitx+9,box.y+10,box.splitx+9,box.y2-1,170,170,170),\015\n\011}\015\n\011function box:updatescroll()\015\n\011\011self.scrollbar:update(self.numlist,self.max_lines)\015\n\011end\015\n\011function box:clear()\015\n\011\011self.list={}\015\n\011\011self.numlist=0\015\n\011end\015\n\011function box:add(f,f2,text,localscript)\015\n\011\011local but = ui_checkbox.new_button(self.x,self.y+1+((self.numlist+1)*10),tpt.textwidth(text)+4,10,self.max_text_width,f,f2,text,localscript)\015\n\011\011table.insert(self.list,but)\015\n\011\011self.numlist = #self.list\015\n\011\011return but\015\n\011end\015\n\011box:drawadd(function (self)\015\n\011\011tpt.drawtext(self.x+24,self.y+2,\"Files in \"..TPT_LUA_PATH..\" folder\")\015\n\011\011tpt.drawtext(self.splitx+11,self.y+2,\"Update\")\015\n\011\011for i,line in ipairs(self.lines) do\015\n\011\011\011line:draw()\015\n\011\011end\015\n\011\011self.scrollbar:draw()\015\n\011\011local restart = false\015\n\011\011for i,check in ipairs(self.list) do\015\n\011\011\011local filepath = check.ID and localscripts[check.ID] and localscripts[check.ID][\"path\"] or check.t.text\015\n\011\011\011if not check.selected and running[filepath] then\015\n\011\011\011\011restart = true\015\n\011\011\011end\015\n\011\011\011if i>self.scrollbar.pos and i<=self.scrollbar.pos+self.max_lines then\015\n\011\011\011\011check:draw()\015\n\011\011\011end\015\n\011\011end\015\n\011\011requiresrestart = restart and not online\015\n\011end)\015\n\011box:moveadd(function(self,x,y)\015\n\011\011for i,line in ipairs(self.lines) do\015\n\011\011\011line:onmove(x,y)\015\n\011\011end\015\n\011\011for i,check in ipairs(self.list) do\015\n\011\011\011check:onmove(x,y)\015\n\011\011end\015\n\011end)\015\n\011function box:scroll(amount)\015\n\011\011local move = amount*10\015\n\011\011if move==0 then return end\015\n\011\011for i,check in ipairs(self.list) do\015\n\011\011\011check:onmove(0,move)\015\n\011\011end\015\n\011end\015\n\011function box:process(mx,my,button,event,wheel)\015\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2-7 then return false end\015\n\011\011local scrolled = self.scrollbar:process(mx,my,button,event,wheel)\015\n\011\011if scrolled then self:scroll(scrolled) end\015\n\011\011local which = math.floor((my-self.y-11)/10)+1\015\n\011\011if which>0 and which<=self.numlist then self.list[which+self.scrollbar.pos]:process(mx,my,button,event,wheel) end\015\n\011\011if event == 2 then\015\n\011\011\011for i,v in ipairs(self.list) do v.clicked = false end\015\n\011\011end\015\n\011\011return true\015\n\011end\015\n\011return box\015\nend\015\n}\015\nui_console = {\015\nnew = function(x,y,w,h)\015\n\011local con = ui_box.new(x,y,w,h)\015\n\011con.shown_lines = math.floor(con.h/10)\015\n\011con.max_lines = 300\015\n\011con.max_width = con.w-4\015\n\011con.lines = {}\015\n\011con.scrollbar = ui_scrollbar.new(con.x2-2,con.y+1,con.h-2,0,con.shown_lines)\015\n\011con:drawadd(function(self)\015\n\011\011self.scrollbar:draw()\015\n\011\011local count=0\015\n\011\011for i,line in ipairs(self.lines) do\015\n\011\011\011if i>self.scrollbar.pos and i<= self.scrollbar.pos+self.shown_lines then\015\n\011\011\011\011line:draw(self.x+3,self.y+3+(count*10))\015\n\011\011\011\011count = count+1\015\n\011\011\011end\015\n\011\011end\015\n\011end)\015\n\011con:moveadd(function(self,x,y)\015\n\011\011self.scrollbar:onmove(x,y)\015\n\011end)\015\n\011function con:clear()\015\n\011\011self.lines = {}\015\n\011\011self.scrollbar:update(0,con.shown_lines)\015\n\011end\015\n\011function con:addstr(str,r,g,b)\015\n\011\011str = tostring(str)\015\n\011\011local nextl = str:find('\\n')\015\n\011\011while nextl do\015\n\011\011\011local line = str:sub(1,nextl-1)\015\n\011\011\011self:addline(line,r,g,b)\015\n\011\011\011str = str:sub(nextl+1)\015\n\011\011\011nextl = str:find('\\n')\015\n\011\011end\015\n\011\011self:addline(str,r,g,b) --anything leftover\015\n\011end\015\n\011function con:addline(line,r,g,b)\015\n\011\011if not line or line==\"\" then return end --No blank lines\015\n\011\011table.insert(self.lines,ui_text.newscroll(line,self.x,0,self.max_width,r,g,b))\015\n\011\011if #self.lines>self.max_lines then table.remove(self.lines,1) end\015\n\011\011self.scrollbar:update(#self.lines,self.shown_lines,#self.lines-self.shown_lines)\015\n\011end\015\n\011function con:process(mx,my,button,event,wheel)\015\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then return false end\015\n\011\011self.scrollbar:process(mx,my,button,event,wheel)\015\n\011\011local which = math.floor((my-self.y-1)/10)+1\015\n\011\011if which>0 and which<=self.shown_lines and self.lines[which+self.scrollbar.pos] then self.lines[which+self.scrollbar.pos]:process(mx,my,button,event,wheel) end\015\n\011\011return true\015\n\011end\015\n\011return con\015\nend\015\n}\015\nui_window = {\015\nnew = function(x,y,w,h)\015\n\011local w=ui_box.new(x,y,w,h)\015\n\011w.sub={}\015\n\011function w:add(m,name)\015\n\011\011if name then w[name]=m end\015\n\011\011table.insert(self.sub,m)\015\n\011end\015\n\011w:drawadd(function(self)\015\n\011\011for i,sub in ipairs(self.sub) do\015\n\011\011\011sub:draw()\015\n\011\011end\015\n\011end)\015\n\011w:moveadd(function(self,x,y)\015\n\011\011for i,sub in ipairs(self.sub) do\015\n\011\011\011sub:onmove(x,y)\015\n\011\011end\015\n\011end)\015\n\011function w:process(mx,my,button,event,wheel)\015\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then if button == 0 then return end ui_button.sidepressed() return true end\015\n\011\011local ret\015\n\011\011for i,sub in ipairs(self.sub) do\015\n\011\011\011if sub:process(mx,my,button,event,wheel) then ret = true end\015\n\011\011end\015\n\011\011return ret\015\n\011end\015\n\011return w\015\nend\015\n}\015\n--Main window with everything!\015\nlocal mainwindow = ui_window.new(50,50,525,300)\015\nmainwindow:setbackground(10,10,10,235) mainwindow.drawbackground=true\015\nmainwindow:add(ui_console.new(275,148,300,189),\"menuconsole\")\015\nmainwindow:add(ui_checkbox.new(50,80,225,257),\"checkbox\")\015\ntooltip = ui_tooltip.new(0,1,250,\"\")\015\n\015\n--Some API functions you can call from other scripts\015\n--put 'using_manager=MANAGER ~= nil' or similar in your scripts, using_manager will be true if the manager is active\015\n--Print a message to the manager console, can be colored\015\nfunction MANAGER.print(msg,...)\015\n\011mainwindow.menuconsole:addstr(msg,...)\015\nend\015\n--downloads and returns a file, so you can do whatever...\015\nlocal download_file\015\nfunction MANAGER.download(url)\015\n\011return download_file(url)\015\nend\015\nfunction MANAGER.scriptinfo(id)\015\n\011local url = \"http://starcatcher.us/scripts/main.lua\"\015\n\011if id then\015\n\011\011url = url..\"?info=\"..id\015\n\011end\015\n\011local info = download_file(url)\015\n\011infotable = readScriptInfo(info)\015\n\011return id and infotable[id] or infotable\015\nend\015\n--Get various info about the system (operating system, script directory, path seperator, if socket is loaded)\015\nfunction MANAGER.sysinfo()\015\n\011return {[\"OS\"]=OS, [\"scriptDir\"]=TPT_LUA_PATH, [\"pathSep\"]=PATH_SEP, [\"exeName\"] = EXE_NAME}\015\nend\015\n--Save a setting in the autorun settings file, ident should be your script name no one else would use.\015\n--Name is variable name, val is the value which will be saved/returned as a string\015\nfunction MANAGER.savesetting(ident,name,val)\015\n\011ident = tostring(ident)\015\n\011name = tostring(name)\015\n\011val = tostring(val)\015\n\011if settings[ident] then settings[ident][name]=val\015\n\011else settings[ident]={[name]=val} end\015\n\011save_last()\015\nend\015\n--Get a previously saved value, if it has one\015\nfunction MANAGER.getsetting(ident,name)\015\n\011if settings[ident] then return settings[ident][name] end\015\n\011return nil\015\nend\015\n--delete a setting, leave name nil to delete all of ident\015\nfunction MANAGER.delsetting(ident,name)\015\n\011if settings[ident] then\015\n\011if name then settings[ident][name]=nil\015\n\011else settings[ident]=nil end\015\n\011save_last()\015\n\011end\015\nend\015\n\015\n--mniip's download thing (mostly)\015\nlocal pattern = \"http://w*%.?(.-)(/.*)\"\015\nfunction download_file(url)\015\n\011local _,_,host,rest = url:find(pattern)\015\n\011if not host or not rest then MANAGER.print(\"Bad link\") return end\015\n\011local conn=socket.tcp()\015\n\011if not conn then return end\015\n\011local succ=pcall(conn.connect,conn,host,80)\015\n\011conn:settimeout(5)\015\n\011if not succ then return end\015\n\011local userAgent = \"PowderToy/\"..tpt.version.major..\".\"..tpt.version.minor..\".\"..tpt.version.build..\" (\"..((OS == \"WIN32\" or OS == \"WIN64\") and \"WIN; \" or (os == \"MACOSX\" and \"OSX; \" or \"LIN; \"))..(jacobsmod and \"M1\" or \"M0\")..\") SCRIPT/\"..MANAGER.version\015\n\011succ,resp,something=pcall(conn.send,conn,\"GET \"..rest..\" HTTP/1.1\\r\\nHost: \"..host..\"\\r\\nConnection: close\\r\\nUser-Agent: \"..userAgent..\"\\r\\n\\n\")\015\n\011if not succ then return end\015\n\011local data=\"\"\015\n\011local c=\"\"\015\n\011while c do\015\n\011\011c=conn:receive(\"*l\")\015\n\011\011if c then\015\n\011\011\011data=data..\"\\n\"..c\015\n\011\011end\015\n\011end\015\n\011if data==\"\" then MANAGER.print(\"no data\") return end\015\n\011local first,last,code = data:find(\"HTTP/1%.1 (.-) .-\\n\")\015\n\011while last do\015\n\011\011data = data:sub(last+1)\015\n\011\011first,last,header = data:find(\"^([^\\n]-:.-)\\n\")\015\n\011\011--read something from headers?\015\n\011\011if header then\015\n\011\011\011if tonumber(code)==302 then\015\n\011\011\011\011local _,_,new = header:find(\"^Location: (.*)\")\015\n\011\011\011\011if new then return download_file(new) end\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\011if host:find(\"pastebin.com\") then --pastebin adds some weird numbers\015\n\011\011_,_,data=data:find(\"\\n[^\\n]*\\n(.*)\\n.+\\n$\")\015\n\011end\015\n\011return data\015\nend\015\n--Downloads to a location\015\nlocal function download_script(ID,location)\015\n\011local file = download_file(\"http://starcatcher.us/scripts/main.lua?get=\"..ID)\015\n\011if file then\015\n\011\011f=io.open(location,\"w\")\015\n\011\011f:write(file)\015\n\011\011f:close()\015\n\011\011return true\015\n\011end\015\n\011return false\015\nend\015\n--Restart exe (if named correctly)\015\nlocal function do_restart()\015\n\011save_last()\015\n\011if platform then\015\n\011\011platform.restart()\015\n\011end\015\n\011if OS == \"WIN32\" or OS == \"WIN64\" then\015\n\011\011os.execute(\"TASKKILL /IM \\\"\"..EXE_NAME..\"\\\" /F &&START .\\\\\\\"\"..EXE_NAME..\"\\\"\")\015\n\011elseif OS == \"OSX\" then\015\n\011\011MANAGER.print(\"Can't restart on OS X when using game versions less than 91.0, please manually close and reopen The Powder Toy\")\015\n\011\011return\015\n\011else\015\n\011\011os.execute(\"killall -s KILL \\\"\"..EXE_NAME..\"\\\" && ./\\\"\"..EXE_NAME..\"\\\"\")\015\n\011end\015\n\011MANAGER.print(\"Restart failed, do you have the exe name right?\",255,0,0)\015\nend\015\nlocal function open_link(url)\015\n\011if platform then\015\n\011\011platform.openLink(url)\015\n\011else\015\n\011\011local command = (OS == \"WIN32\" or OS == \"WIN64\") and \"start\" or (OS == \"MACOSX\" and \"open\" or \"xdg-open\")\015\n\011\011os.execute(command..\" \"..url)\015\n\011end\015\nend\015\n--TPT interface\015\nlocal function step()\015\n\011if jacobsmod then\015\n\011\011tpt.fillrect(0,0,gfx.WIDTH,gfx.HEIGHT,0,0,0,150)\015\n\011else\015\n\011\011tpt.fillrect(-1,-1,gfx.WIDTH,gfx.HEIGHT,0,0,0,150)\015\n\011end\015\n\011mainwindow:draw()\015\n\011tpt.drawtext(280,140,\"Console Output:\")\015\n\011if requiresrestart then\015\n\011\011tpt.drawtext(280,88,\"Disabling a script requires a restart for effect!\",255,50,50)\015\n\011end\015\n\011tpt.drawtext(55,55,\"Click a script to toggle, hit DONE when finished\")\015\n\011tpt.drawtext(474,55,\"Script Manager v\"..MANAGER.version)--479 for simple versions\015\n\011tooltip:draw()\015\nend\015\nlocal function mouseclick(mousex,mousey,button,event,wheel)\015\n\011sidebutton:process(mousex,mousey,button,event,wheel)\015\n\011if MANAGER.hidden then return true end\015\n\015\n\011if mousex>612 or mousey>384 then return false end\015\n\011mainwindow:process(mousex,mousey,button,event,wheel)\015\n\011return false\015\nend\015\nlocal jacobsmod_old_menu_check = false\015\nlocal function keypress(key,nkey,modifier,event)\015\n\011if jacobsmod and key == 'o' and event == 1 then jacobsmod_old_menu_check = true end\015\n\011if nkey==27 and not MANAGER.hidden then MANAGER.hidden=true return false end\015\n\011if MANAGER.hidden then return end\015\n\015\n\011if event == 1 then\015\n\011\011if key == \"[\" then\015\n\011\011\011mainwindow:process(mainwindow.x+30, mainwindow.y+30, 0, 2, 1)\015\n\011\011elseif key == \"]\" then\015\n\011\011\011mainwindow:process(mainwindow.x+30, mainwindow.y+30, 0, 2, -1)\015\n\011\011end\015\n\011end\015\n\011return false\015\nend\015\n--small button on right to bring up main menu\015\nlocal WHITE = {255,255,255,255}\015\nlocal BLACK = {0,0,0,255}\015\nlocal ICON = math.random(2) --pick a random icon\015\nlocal lua_letters= {{{2,2,2,7},{2,7,4,7},{6,7,6,11},{6,11,8,11},{8,7,8,11},{10,11,12,11},{10,11,10,15},{11,13,11,13},{12,11,12,15},},\015\n\011{{2,3,2,13},{2,14,7,14},{4,3,4,12},{4,12,7,12},{7,3,7,12},{9,3,12,3},{9,3,9,14},{10,8,11,8},{12,3,12,14},}}\015\nlocal function smallstep()\015\n\011gfx.drawRect(sidebutton.x, sidebutton.y+1, sidebutton.w+1, sidebutton.h+1,200,200,200)\015\n\011local color=WHITE\015\n\011if not MANAGER.hidden then\015\n\011\011step()\015\n\011\011gfx.fillRect(sidebutton.x, sidebutton.y+1, sidebutton.w+1, sidebutton.h+1)\015\n\011\011color=BLACK\015\n\011end\015\n\011for i,dline in ipairs(lua_letters[ICON]) do\015\n\011\011tpt.drawline(dline[1]+sidebutton.x,dline[2]+sidebutton.y,dline[3]+sidebutton.x,dline[4]+sidebutton.y,color[1],color[2],color[3])\015\n\011end\015\n\011if jacobsmod_old_menu_check then\015\n\011\011if tpt.oldmenu()==0 and sidebutton.y > 150 then sidebutton:onmove(0, -256) elseif tpt.oldmenu()==1 and sidebutton.y < 150 then sidebutton:onmove(0, 256) end\015\n\011\011jacobsmod_old_menu_check = false\015\n\011end\015\nend\015\n--button functions on click\015\nfunction ui_button.reloadpressed(self)\015\n\011load_filenames()\015\n\011load_downloaded()\015\n\011gen_buttons()\015\n\011mainwindow.checkbox:updatescroll()\015\n\011if num_files == 0 then\015\n\011\011MANAGER.print(\"No scripts found in '\"..TPT_LUA_PATH..\"' folder\",255,255,0)\015\n\011\011fs.makeDirectory(TPT_LUA_PATH)\015\n\011else\015\n\011\011MANAGER.print(\"Reloaded file list, found \"..num_files..\" scripts\")\015\n\011end\015\nend\015\nfunction ui_button.selectnone(self)\015\n\011for i,but in ipairs(mainwindow.checkbox.list) do\015\n\011\011but.selected = false\015\n\011end\015\nend\015\nfunction ui_button.consoleclear(self)\015\n\011mainwindow.menuconsole:clear()\015\nend\015\nfunction ui_button.changedir(self)\015\n\011local last = TPT_LUA_PATH\015\n\011local new = tpt.input(\"Change search directory\",\"Enter the folder where your scripts are\",TPT_LUA_PATH,TPT_LUA_PATH)\015\n\011if new~=last and new~=\"\" then\015\n\011\011fs.removeFile(last..PATH_SEP..\"autorunsettings.txt\")\015\n\011\011MANAGER.print(\"Directory changed to \"..new,255,255,0)\015\n\011\011TPT_LUA_PATH = new\015\n\011end\015\n\011ui_button.reloadpressed()\015\n\011save_last()\015\nend\015\nfunction ui_button.uploadscript(self)\015\n\011if not online then\015\n\011\011local command = (OS == \"WIN32\" or OS == \"WIN64\") and \"start\" or (OS == \"MACOSX\" and \"open\" or \"xdg-open\")\015\n\011\011os.execute(command..\" \"..TPT_LUA_PATH)\015\n\011else\015\n\011\011open_link(\"http://starcatcher.us/scripts/#submit-page\")\015\n\011end\015\nend\015\nlocal lastpaused\015\nfunction ui_button.sidepressed(self)\015\n\011if TPTMP and TPTMP.chatHidden == false then print(\"minimize TPTMP before opening the manager\") return end\015\n\011MANAGER.hidden = not MANAGER.hidden\015\n\011ui_button.localview()\015\n\011if not MANAGER.hidden then\015\n\011\011lastpaused = tpt.set_pause()\015\n\011\011tpt.set_pause(1)\015\n\011\011ui_button.reloadpressed()\015\n\011else\015\n\011\011tpt.set_pause(lastpaused)\015\n\011end\015\nend\015\nlocal donebutton\015\nfunction ui_button.donepressed(self)\015\n\011MANAGER.hidden = true\015\n\011for i,but in ipairs(mainwindow.checkbox.list) do\015\n\011\011local filepath = but.ID and localscripts[but.ID][\"path\"] or but.t.text\015\n\011\011if but.selected then\015\n\011\011\011if requiresrestart then\015\n\011\011\011\011running[filepath] = true\015\n\011\011\011else\015\n\011\011\011\011if not running[filepath] then\015\n\011\011\011\011\011local status,err = pcall(dofile,TPT_LUA_PATH..PATH_SEP..filepath)\015\n\011\011\011\011\011if not status then\015\n\011\011\011\011\011\011MANAGER.print(err,255,0,0)\015\n\011\011\011\011\011\011print(err)\015\n\011\011\011\011\011\011but.selected = false\015\n\011\011\011\011\011else\015\n\011\011\011\011\011\011MANAGER.print(\"Started \"..filepath)\015\n\011\011\011\011\011\011running[filepath] = true\015\n\011\011\011\011\011end\015\n\011\011\011\011end\015\n\011\011\011end\015\n\011\011elseif running[filepath] then\015\n\011\011\011running[filepath] = nil\015\n\011\011end\015\n\011end\015\n\011if requiresrestart then do_restart() return end\015\n\011save_last()\015\nend\015\nfunction ui_button.downloadpressed(self)\015\n\011for i,but in ipairs(mainwindow.checkbox.list) do\015\n\011\011if but.selected then\015\n\011\011\011--maybe do better display names later\015\n\011\011\011local displayName\015\n\011\011\011local function get_script(butt)\015\n\011\011\011\011local script = download_file(\"http://starcatcher.us/scripts/main.lua?get=\"..butt.ID)\015\n\011\011\011\011displayName = \"downloaded\"..PATH_SEP..butt.ID..\" \"..onlinescripts[butt.ID].author..\"-\"..onlinescripts[butt.ID].name..\".lua\"\015\n\011\011\011\011local name = TPT_LUA_PATH..PATH_SEP..displayName\015\n\011\011\011\011if not fs.exists(TPT_LUA_PATH..PATH_SEP..\"downloaded\") then\015\n\011\011\011\011\011fs.makeDirectory(TPT_LUA_PATH..PATH_SEP..\"downloaded\")\015\n\011\011\011\011end\015\n\011\011\011\011local file = io.open(name, \"w\")\015\n\011\011\011\011if not file then error(\"could not open \"..name) end\015\n\011\011\011\011file:write(script)\015\n\011\011\011\011file:close()\015\n\011\011\011\011if localscripts[butt.ID] and localscripts[butt.ID][\"path\"] ~= displayName then\015\n\011\011\011\011\011local oldpath = localscripts[butt.ID][\"path\"]\015\n\011\011\011\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..oldpath:gsub(\"\\\\\",\"/\"))\015\n\011\011\011\011\011running[oldpath] = nil\015\n\011\011\011\011end\015\n\011\011\011\011localscripts[butt.ID] = onlinescripts[butt.ID]\015\n\011\011\011\011localscripts[butt.ID][\"path\"] = displayName\015\n\011\011\011\011dofile(name)\015\n\011\011\011end\015\n\011\011\011local status,err = pcall(get_script, but)\015\n\011\011\011if not status then\015\n\011\011\011\011MANAGER.print(err,255,0,0)\015\n\011\011\011\011print(err)\015\n\011\011\011\011but.selected = false\015\n\011\011\011else\015\n\011\011\011\011MANAGER.print(\"Downloaded and started \"..but.t.text)\015\n\011\011\011\011running[displayName] = true\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\011MANAGER.hidden = true\015\n\011ui_button.localview()\015\n\011save_last()\015\nend\015\n\015\nfunction ui_button.pressed(self)\015\n\011self.selected = not self.selected\015\nend\015\nfunction ui_button.delete(self)\015\n\011--there is no tpt.confirm() yet\015\n\011if tpt.input(\"Delete File\", \"Delete \"..self.t.text..\"?\", \"yes\", \"no\") == \"yes\" then\015\n\011\011local filepath = self.ID and localscripts[self.ID][\"path\"] or self.t.text\015\n\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..filepath:gsub(\"\\\\\",\"/\"))\015\n\011\011if running[filepath] then running[filepath] = nil end\015\n\011\011if localscripts[self.ID] then localscripts[self.ID] = nil end\015\n\011\011save_last()\015\n\011\011ui_button.localview()\015\n\011\011load_filenames()\015\n\011\011gen_buttons()\015\n\011end\015\nend\015\nfunction ui_button.viewonline(self)\015\n\011open_link(\"http://starcatcher.us/scripts/#\"..self.ID)\015\nend\015\nfunction ui_button.scriptcheck(self)\015\n\011local oldpath = localscripts[self.ID][\"path\"]\015\n\011local newpath = \"downloaded\"..PATH_SEP..self.ID..\" \"..onlinescripts[self.ID].author..\"-\"..onlinescripts[self.ID].name..\".lua\"\015\n\011if download_script(self.ID,TPT_LUA_PATH..PATH_SEP..newpath) then\015\n\011\011self.canupdate = false\015\n\011\011localscripts[self.ID] = onlinescripts[self.ID]\015\n\011\011localscripts[self.ID][\"path\"] = newpath\015\n\011\011if oldpath ~= newpath then\015\n\011\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..oldpath:gsub(\"\\\\\",\"/\"))\015\n\011\011\011if running[oldpath] then\015\n\011\011\011\011running[newpath],running[oldpath] = running[oldpath],nil\015\n\011\011\011end\015\n\011\011end\015\n\011\011if running[newpath] then\015\n\011\011\011do_restart()\015\n\011\011else\015\n\011\011\011save_last()\015\n\011\011\011MANAGER.print(\"Updated \"..onlinescripts[self.ID][\"name\"])\015\n\011\011end\015\n\011end\015\nend\015\nfunction ui_button.doupdate(self)\015\n\011if jacobsmod and jacobsmod >= 30 then\015\n\011\011fileSystem.move(\"scriptmanager.lua\", \"scriptmanagerold.lua\")\015\n\011\011download_script(1, 'scriptmanager.lua')\015\n\011else\015\n\011\011fileSystem.move(\"autorun.lua\", \"autorunold.lua\")\015\n\011\011download_script(1, 'autorun.lua')\015\n\011end\015\n\011localscripts[1] = updatetable[1]\015\n\011do_restart()\015\nend\015\nlocal uploadscriptbutton\015\nfunction ui_button.localview(self)\015\n\011if online then\015\n\011\011online = false\015\n\011\011gen_buttons()\015\n\011\011donebutton.t.text = \"DONE\"\015\n\011\011donebutton.w = 29 donebutton.x2 = donebutton.x + donebutton.w\015\n\011\011donebutton.f = ui_button.donepressed\015\n\011\011uploadscriptbutton.t.text = \"\\147 Script Folder\"\015\n\011end\015\nend\015\nfunction ui_button.onlineview(self)\015\n\011if not online then\015\n\011\011online = true\015\n\011\011gen_buttons()\015\n\011\011donebutton.t.text = \"DOWNLOAD\"\015\n\011\011donebutton.w = 55 donebutton.x2 = donebutton.x + donebutton.w\015\n\011\011donebutton.f = ui_button.downloadpressed\015\n\011\011uploadscriptbutton.t.text = \"Upload Script\"\015\n\011end\015\nend\015\n--add buttons to window\015\ndonebutton = ui_button.new(55,339,29,10,ui_button.donepressed,\"DONE\")\015\nmainwindow:add(donebutton)\015\nmainwindow:add(ui_button.new(134,339,40,10,ui_button.sidepressed,\"CANCEL\"))\015\n--mainwindow:add(ui_button.new(152,339,29,10,ui_button.selectnone,\"NONE\"))\015\nlocal nonebutton = ui_button.new(62,81,8,8,ui_button.selectnone,\"\")\015\nnonebutton.drawbox = true\015\nmainwindow:add(nonebutton)\015\nmainwindow:add(ui_button.new(538,339,33,10,ui_button.consoleclear,\"CLEAR\"))\015\nmainwindow:add(ui_button.new(278,67,39,10,ui_button.reloadpressed,\"RELOAD\"))\015\nmainwindow:add(ui_button.new(378,67,51,10,ui_button.changedir,\"Change dir\"))\015\nuploadscriptbutton = ui_button.new(478,67,79,10,ui_button.uploadscript,\"\\147 Script Folder\")\015\nmainwindow:add(uploadscriptbutton)\015\nlocal tempbutton = ui_button.new(60, 65, 30, 10, ui_button.localview, \"Local\")\015\ntempbutton.drawbox = true\015\nmainwindow:add(tempbutton)\015\ntempbutton = ui_button.new(100, 65, 35, 10, ui_button.onlineview, \"Online\")\015\ntempbutton.drawbox = true\015\nmainwindow:add(tempbutton)\015\nsidebutton = ui_button.new(gfx.WIDTH-16,134,14,15,ui_button.sidepressed,'')\015\nif jacobsmod and tpt.oldmenu()==1 then\015\n\011sidebutton:onmove(0, 256)\015\nend\015\n\015\nlocal function gen_buttons_local()\015\n\011local count = 0\015\n\011local sorted = {}\015\n\011for k,v in pairs(localscripts) do if v.ID ~= 1 then table.insert(sorted, v) end end\015\n\011table.sort(sorted, function(first,second) return first.name:lower() < second.name:lower() end)\015\n\011for i,v in ipairs(sorted) do\015\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed,ui_button.delete,v.name,true)\015\n\011\011check.ID = v.ID\015\n\011\011if running[v.path] then\015\n\011\011\011check.running = true\015\n\011\011\011check.selected = true\015\n\011\011end\015\n\011\011count = count + 1\015\n\011end\015\n\011if #sorted >= 5 and #filenames >= 5 then\015\n\011\011mainwindow.checkbox:add(nil, nil, \"\", false) --empty space to separate things\015\n\011end\015\n\011for i=1,#filenames do\015\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed,ui_button.delete,filenames[i],true)\015\n\011\011if running[filenames[i]] then\015\n\011\011\011check.running = true\015\n\011\011\011check.selected = true\015\n\011\011end\015\n\011end\015\n\011num_files = count + #filenames\015\nend\015\nlocal function gen_buttons_online()\015\n\011local list = download_file(\"http://starcatcher.us/scripts/main.lua\")\015\n\011onlinescripts = readScriptInfo(list)\015\n\011local sorted = {}\015\n\011for k,v in pairs(onlinescripts) do table.insert(sorted, v) end\015\n\011table.sort(sorted, function(first,second) return first.ID < second.ID end)\015\n\011for k,v in pairs(sorted) do\015\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed, ui_button.viewonline, v.name, false)\015\n\011\011check.ID = v.ID\015\n\011\011check.checkbut.ID = v.ID\015\n\011\011if localscripts[v.ID] then\015\n\011\011\011check.running = true\015\n\011\011\011if tonumber(v.version) > tonumber(localscripts[check.ID].version) then\015\n\011\011\011\011check.checkbut.canupdate = true\015\n\011\011\011end\015\n\011\011end\015\n\011end\015\n\011if first_online then\015\n\011\011first_online = false\015\n\011\011local updateinfo = download_file(\"http://starcatcher.us/scripts/main.lua?info=1\")\015\n\011\011updatetable = readScriptInfo(updateinfo)\015\n\011\011if not updatetable[1] then return end\015\n\011\011if tonumber(updatetable[1].version) > scriptversion then\015\n\011\011\011local updatebutton = ui_button.new(278,127,40,10,ui_button.doupdate,\"UPDATE\")\015\n\011\011\011updatebutton.t:setcolor(25,255,25)\015\n\011\011\011mainwindow:add(updatebutton)\015\n\011\011\011MANAGER.print(\"A script manager update is available! Click UPDATE\",25,255,55)\015\n\011\011\011MANAGER.print(updatetable[1].changelog,25,255,55)\015\n\011\011end\015\n\011end\015\nend\015\ngen_buttons = function()\015\n\011mainwindow.checkbox:clear()\015\n\011if online then\015\n\011\011gen_buttons_online()\015\n\011else\015\n\011\011gen_buttons_local()\015\n\011end\015\n\011mainwindow.checkbox:updatescroll()\015\nend\015\ngen_buttons()\015\n\015\n--register manager first\015\ntpt.register_step(smallstep)\015\n--load previously running scripts\015\nlocal started = \"\"\015\nfor prev,v in pairs(running) do\015\n\011local status,err = pcall(dofile,TPT_LUA_PATH..PATH_SEP..prev)\015\n\011if not status then\015\n\011\011MANAGER.print(err,255,0,0)\015\n\011\011running[prev] = nil\015\n\011else\015\n\011\011started=started..\" \"..prev\015\n\011\011local newbut = mainwindow.checkbox:add(ui_button.pressed,prev,nil,false)\015\n\011\011newbut.selected=true\015\n\011end\015\nend\015\nsave_last()\015\nif started~=\"\" then\015\n\011MANAGER.print(\"Auto started\"..started)\015\nend\015\ntpt.register_mouseevent(mouseclick)\015\ntpt.register_keypress(keypress)";
	luaL_loadbuffer(l, scriptmanager_luac, scriptmanager_luac_sz, "@scriptmanager.lua");
	lua_pcall(l, 0, 0, 0);
#endif
}
#endif
